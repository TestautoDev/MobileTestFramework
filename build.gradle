group 'opensource'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'io.qameta.allure'
apply plugin: "org.sonarqube"
apply plugin: 'maven-publish'
apply plugin: 'distribution'
apply plugin: 'com.jfrog.artifactory'

sourceCompatibility = 1.8

repositories {
    maven { url "https://cloud.experitest.com/repo" }
    maven { url "http://repo.maven.apache.org/maven2" }
    maven { url "https://plugins.gradle.org/m2/" }
    mavenCentral()
    jcenter()
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.5"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7"
        classpath 'com.amazonaws:aws-devicefarm-gradle-plugin:1.3'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
    }
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"
    publish {
        repository {
            repoKey = 'gradle-dev-local'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
    }
    resolve {
        repository {
            repoKey = 'gradle-dev'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
    }
}

allure {
    autoconfigure = true
    aspectjweaver = true
    version = '2.7.0'
    useTestNG {
        version = '2.7.0'
    }
    downloadLink = 'https://github.com/allure-framework/allure2/releases/download/2.7.0/allure-2.7.0.zip'
}

//loadConfig()
//
//def loadConfig(){
//    def configFile = this.hasProperty('env')? getProperty('env'):'ST'
//    println "environment is set to $configFile"
//    def props = new Properties()
//    def environment = "input/envproperties/$configFile"+".properties"
//    println "Reading"+"$environment"+"file"
//
//    new File(environment).withInputStream {
//        stream -> props.load(stream)
//    }
//    def configProp = new ConfigSlurper().parse(props)
//    ext.Testbrowser = this.hasProperty('Browser')?getProperty('Browser'):'X'
//    ext.TestEnv = System.getProperty("ENV")?System.getenv("ENV"):configProp.ENV
//    ext.TestServer = System.getProperty("TestServer")?System.getenv("TestServer"):configProp.TestServer
//}

//test{
//    if(System.getProperty('DEBUG','false') == 'true'){
//        jvmArgs '-Xdebug',
//                '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5006'
//    }
//}


sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }
    test {
        java.srcDir file('src/test/java')
        resources.srcDir file('scr/test/resource')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

dependencies {
    compile group: 'com.amazonaws', name: 'aws-java-sdk', version: '1.11.402'
    compile group: 'io.appium', name: 'java-client', version: '7.0.0'
    compile group: 'net.reini', name: 'slf4-cdi', version: '1.0'
    compile group: 'org.assertj', name: 'assertj-core', version: '3.11.0'
    compile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    compile group: 'org.testng', name: 'testng', version: '6.14.3'
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    compile group: 'com.relevantcodes', name: 'extentreports', version: '2.41.2'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'net.sourceforge.javacsv', name: 'javacsv', version: '2.0'
    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.16'
    compile group: 'org.apache.poi', name: 'poi-ooxml-schemas', version: '3.16'
    compile group: 'org.apache.poi', name: 'poi-excelant', version: '3.16'
    compile group: 'org.apache.poi', name: 'poi-examples', version: '3.16'
    compile group: 'org.apache.poi', name: 'poi-scratchpad', version: '3.16'
    compile group: 'org.apache.poi', name: 'poi', version: '3.16'
    compile group: 'org.apache.xmlbeans', name: 'xmlbeans', version: '2.6.0'
    compile group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: '6.4.0.jre8'
    compile group: 'io.qameta.allure', name: 'allure-gradle', version: '2.4'
    compile group: 'io.qameta.allure', name: 'allure-testng', version: '2.7.0'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'
    compile group: 'com.github.javafaker', name: 'javafaker', version: '0.15'
    compile group: 'io.rest-assured', name: 'rest-assured', version: '3.2.0'
    compile 'io.rest-assured:json-path:3.2.0'
    compile 'io.rest-assured:json-schema-validator:3.2.0'
    compile group: 'org.json', name: 'json', version: '20180130'
    compile group: 'com.mashape.unirest', name: 'unirest-java', version: '1.4.9'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.1'
    compile group: 'com.mashape.unirest', name: 'unirest-java', version: '1.4.9'
    compile group: 'com.github.tomakehurst', name: 'wiremock', version: '2.19.0'
    compile group: 'net.lightbody.bmp', name: 'browsermob-core', version: '2.1.5'
}

task E2E(type: Test) {
    useTestNG() {
        outputDirectory = file("$project.buildDir/testngOutput")
        useDefaultListeners = true
        suiteXmlFiles << new File("src/test/suite/testweb.xml")
        setSuiteXmlFiles(suiteXmlFiles)
    }
    testLogging {
        exceptionFormat "full"
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        minGranularity 0
    }
    reports {
        junitXml.enabled = false
        html.enabled = true
    }
//    systemProperties=["TestEnv":"${TestEnv}","TestServer":"${TestServer}"]
}

task Report(type: Test) {
    useTestNG() {
        outputDirectory = file("$project.buildDir/testngOutput")
        useDefaultListeners = true
        suiteXmlFiles << new File("src/test/suite/reporting.xml")
        setSuiteXmlFiles(suiteXmlFiles)
    }
}

task Zip(type: Zip){
    from 'build'
    include '*'
    include '*/*/*/*/*/*/*'
    archiveName 'Build.zip'
    destinationDir(file('test-output/'))
    baseName = project.name
}

publishing{
    publications{
        mavenZip(MavenPublication){
            groupId 'test'
            version="1.0"
            artifactId='Test'
            artifact("test-output/Build.zip")
        }
    }
}

javadoc {
    source = project.sourceSets.main.java.srcDirs
    options.linkSource true
    failOnError false
}

gradle.startParameter.continueOnFailure = true
